{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/xampp/htdocs/Gestionale/Gestionale/test-gestionalejs/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/xampp/htdocs/Gestionale/Gestionale/test-gestionalejs/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport PersistanceManager from \"../../persistance/PersistanceManager\";\nimport UserLogicException from \"../error/UserLogicException\";\nvar _id = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _user_name = /*#__PURE__*/_classPrivateFieldLooseKey(\"user_name\");\nvar _isAdmin = /*#__PURE__*/_classPrivateFieldLooseKey(\"isAdmin\");\nvar _email = /*#__PURE__*/_classPrivateFieldLooseKey(\"email\");\nvar _attivato = /*#__PURE__*/_classPrivateFieldLooseKey(\"attivato\");\nvar _dt_user_added = /*#__PURE__*/_classPrivateFieldLooseKey(\"dt_user_added\");\nclass User {\n  constructor(id, user_name, isadmin, email, attivato, dt_user_added) {\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _user_name, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isAdmin, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _email, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _attivato, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _dt_user_added, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _id)[_id] = id;\n    _classPrivateFieldLooseBase(this, _user_name)[_user_name] = user_name;\n    _classPrivateFieldLooseBase(this, _isAdmin)[_isAdmin] = isadmin;\n    _classPrivateFieldLooseBase(this, _attivato)[_attivato] = attivato;\n    _classPrivateFieldLooseBase(this, _email)[_email] = email;\n    _classPrivateFieldLooseBase(this, _dt_user_added)[_dt_user_added] = dt_user_added;\n  }\n  getId() {\n    return _classPrivateFieldLooseBase(this, _id)[_id];\n  }\n  getIsAdmin() {\n    return _classPrivateFieldLooseBase(this, _isAdmin)[_isAdmin];\n  }\n  getUserName() {\n    return _classPrivateFieldLooseBase(this, _user_name)[_user_name];\n  }\n  getEmail() {\n    return _classPrivateFieldLooseBase(this, _email)[_email];\n  }\n  getAttivato() {\n    return _classPrivateFieldLooseBase(this, _attivato)[_attivato];\n  }\n  getDtUserAdded() {\n    return _classPrivateFieldLooseBase(this, _dt_user_added)[_dt_user_added];\n  }\n  async loadUserList() {\n    /**\r\n     * serve per fare la load degli utenti in modo da poter modificare/aggiungere o eliminare una utenza\r\n     */\n\n    const ret = await PersistanceManager.doGet('users.php?azione=1&username=' + _classPrivateFieldLooseBase(this, _user_name)[_user_name]);\n    if (ret['error']) {\n      new UserLogicException('error', ret['errorMessage']);\n    }\n    const userList = [];\n    for (let user of ret['users']) {\n      userList.push(new User(user['id'], user['user_name'], user['is_admin']));\n    }\n    return userList;\n  }\n  static async doLogin(username, passwd) {\n    const data = {\n      username: username,\n      password: passwd\n    };\n    const ret = await PersistanceManager.doPost(data, 'login.php');\n    if (ret[\"error\"]) {\n      throw new UserLogicException(\"error\", ret[\"errorMessage\"]);\n    }\n    const user = new User(ret[\"user\"][\"id\"], ret[\"user\"][\"user_name\"], ret[\"user\"][\"is_admin\"]);\n    new UserLogicException(\"success\", \"Login avvenuto con successo\");\n    return user;\n  }\n  static async doLogin1(username, passwd) {\n    const data = username !== '' && passwd !== '' ? {\n      username: username,\n      password: passwd\n    } : undefined;\n    const ret = await PersistanceManager.doPost('login1.php', data);\n    console.log(ret);\n    if (ret[\"error\"]) {\n      throw new UserLogicException(\"error\", ret[\"errorMessage\"]);\n    }\n    const user = new User(ret[\"id\"], ret[\"username\"], ret[\"isAdmin\"]);\n    new UserLogicException(\"success\", \"Login avvenuto con successo\");\n    return user;\n  }\n  static async doLogout() {\n    /**\r\n     * devo pria implementare la sessione di logout dal server\r\n     */\n    new UserLogicException('success', \"Logout avvenuto con successo\");\n    return true;\n  }\n  static async createNewUser(username, email, password, isadmin) {\n    /**\r\n     * funzione usata per creare una nuova utenza. Devo ritornare un booleano\r\n     */\n\n    // prima faccio la chiamata al server, poi aggiorno l'id\n    const data = {\n      username: username,\n      email: email,\n      password: password,\n      isAdmin: isadmin\n    };\n    const ret = await PersistanceManager.doPost(data, 'users.php?azione=2');\n    if (ret['error']) {\n      new UserLogicException('error', ret['errorMessage']);\n      return;\n    }\n    const userRet = new User(ret['lastId'], username, isadmin);\n    new UserLogicException(\"success\", \"Utente creato con successo.\");\n    return userRet;\n  }\n  static async loadUserInfo(id) {\n    const ret = await PersistanceManager.doGet('users.php?azione=3&id=' + id);\n    if (ret['error']) {\n      new UserLogicException('error', ret['errorMessage']);\n      return;\n    }\n    const userRet = new User(id, ret['user']['user_name'], ret['user']['is_admin'], ret['user']['email'], ret['user']['attivato'], ret['user']['dt_user_added']);\n    return userRet;\n  }\n}\nexport default User;","map":{"version":3,"names":["PersistanceManager","UserLogicException","_id","_classPrivateFieldLooseKey","_user_name","_isAdmin","_email","_attivato","_dt_user_added","User","constructor","id","user_name","isadmin","email","attivato","dt_user_added","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","getId","getIsAdmin","getUserName","getEmail","getAttivato","getDtUserAdded","loadUserList","ret","doGet","userList","user","push","doLogin","username","passwd","data","password","doPost","doLogin1","undefined","console","log","doLogout","createNewUser","isAdmin","userRet","loadUserInfo"],"sources":["C:/xampp/htdocs/Gestionale/Gestionale/test-gestionalejs/src/businesslogic/user/User.js"],"sourcesContent":["import PersistanceManager from \"../../persistance/PersistanceManager\";\r\nimport UserLogicException from \"../error/UserLogicException\";\r\n\r\nclass User {\r\n    #id;\r\n    #user_name;\r\n    #isAdmin;\r\n    #email;\r\n    #attivato;\r\n    #dt_user_added;\r\n    \r\n    constructor (id, user_name, isadmin, email, attivato, dt_user_added) {\r\n        this.#id = id;\r\n        this.#user_name = user_name;\r\n        this.#isAdmin = isadmin;\r\n        this.#attivato = attivato;\r\n        this.#email = email;\r\n        this.#dt_user_added = dt_user_added;\r\n    }\r\n    \r\n    getId() {\r\n        return this.#id;\r\n    }\r\n\r\n    getIsAdmin() {\r\n        return this.#isAdmin;\r\n    }\r\n\r\n    getUserName() {\r\n        return this.#user_name;\r\n    }\r\n\r\n    getEmail() {\r\n        return this.#email;\r\n    }\r\n\r\n    getAttivato() {\r\n        return this.#attivato;\r\n    }\r\n\r\n    getDtUserAdded() {\r\n        return this.#dt_user_added;\r\n    }\r\n\r\n    async loadUserList() {\r\n        /**\r\n         * serve per fare la load degli utenti in modo da poter modificare/aggiungere o eliminare una utenza\r\n         */\r\n        \r\n        const ret = await PersistanceManager.doGet('users.php?azione=1&username='+this.#user_name);\r\n        \r\n        if (ret['error']){\r\n            new UserLogicException('error', ret['errorMessage']);\r\n        }\r\n        const userList = [];\r\n        for (let user of ret['users']) {\r\n            userList.push(new User(user['id'], user['user_name'], user['is_admin']));\r\n        }\r\n\r\n        return userList;\r\n    }\r\n\r\n    static async doLogin(username, passwd) {\r\n        const data = {username: username, password: passwd};\r\n\r\n        const ret = await PersistanceManager.doPost(data, 'login.php');\r\n\r\n        if (ret[\"error\"]){\r\n            throw new UserLogicException(\"error\", ret[\"errorMessage\"]);\r\n        }\r\n\r\n        const user = new User(ret[\"user\"][\"id\"], ret[\"user\"][\"user_name\"], ret[\"user\"][\"is_admin\"]);\r\n        new UserLogicException(\"success\", \"Login avvenuto con successo\");\r\n        return user;\r\n    }\r\n    static async doLogin1(username, passwd) {\r\n        const data = (username!=='' && passwd!=='') ? {username: username, password: passwd} : undefined;\r\n\r\n        const ret = await PersistanceManager.doPost('login1.php', data);\r\n        console.log(ret);\r\n        \r\n\r\n        if (ret[\"error\"]){\r\n            throw new UserLogicException(\"error\", ret[\"errorMessage\"]);\r\n        }\r\n\r\n        const user = new User(ret[\"id\"], ret[\"username\"], ret[\"isAdmin\"]);\r\n        new UserLogicException(\"success\", \"Login avvenuto con successo\");\r\n        return user;\r\n    }\r\n\r\n    static async doLogout() {\r\n        /**\r\n         * devo pria implementare la sessione di logout dal server\r\n         */\r\n        new UserLogicException('success', \"Logout avvenuto con successo\");\r\n        return true;\r\n    }\r\n\r\n    static async createNewUser(username, email, password, isadmin) {\r\n        /**\r\n         * funzione usata per creare una nuova utenza. Devo ritornare un booleano\r\n         */\r\n\r\n        // prima faccio la chiamata al server, poi aggiorno l'id\r\n        const data = {username: username, email: email, password: password, isAdmin: isadmin};\r\n        \r\n        const ret = await PersistanceManager.doPost(data, 'users.php?azione=2');\r\n\r\n        if (ret['error']){\r\n            new UserLogicException('error', ret['errorMessage']);\r\n            return;\r\n        }\r\n        \r\n        const userRet = new User(ret['lastId'], username, isadmin);\r\n        new UserLogicException(\"success\", \"Utente creato con successo.\")\r\n        \r\n        return userRet;\r\n    }\r\n\r\n    static async loadUserInfo(id) {\r\n        const ret = await PersistanceManager.doGet('users.php?azione=3&id=' + id);\r\n        \r\n        if (ret['error']) {\r\n            new UserLogicException('error', ret['errorMessage']);\r\n            return;\r\n        }\r\n\r\n        const userRet = new User(id, ret['user']['user_name'], ret['user']['is_admin'], ret['user']['email'], ret['user']['attivato'], ret['user']['dt_user_added']);\r\n\r\n        return userRet;\r\n    }\r\n}\r\n\r\nexport default User;"],"mappings":";;AAAA,OAAOA,kBAAkB,MAAM,sCAAsC;AACrE,OAAOC,kBAAkB,MAAM,6BAA6B;AAAC,IAAAC,GAAA,gBAAAC,0BAAA;AAAA,IAAAC,UAAA,gBAAAD,0BAAA;AAAA,IAAAE,QAAA,gBAAAF,0BAAA;AAAA,IAAAG,MAAA,gBAAAH,0BAAA;AAAA,IAAAI,SAAA,gBAAAJ,0BAAA;AAAA,IAAAK,cAAA,gBAAAL,0BAAA;AAE7D,MAAMM,IAAI,CAAC;EAQPC,WAAWA,CAAEC,EAAE,EAAEC,SAAS,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAE;IAAAC,MAAA,CAAAC,cAAA,OAAAhB,GAAA;MAAAiB,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAd,UAAA;MAAAe,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAb,QAAA;MAAAc,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAZ,MAAA;MAAAa,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAX,SAAA;MAAAY,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAV,cAAA;MAAAW,QAAA;MAAAC,KAAA;IAAA;IACjEC,2BAAA,KAAI,EAAAnB,GAAA,EAAAA,GAAA,IAAOS,EAAE;IACbU,2BAAA,KAAI,EAAAjB,UAAA,EAAAA,UAAA,IAAcQ,SAAS;IAC3BS,2BAAA,KAAI,EAAAhB,QAAA,EAAAA,QAAA,IAAYQ,OAAO;IACvBQ,2BAAA,KAAI,EAAAd,SAAA,EAAAA,SAAA,IAAaQ,QAAQ;IACzBM,2BAAA,KAAI,EAAAf,MAAA,EAAAA,MAAA,IAAUQ,KAAK;IACnBO,2BAAA,KAAI,EAAAb,cAAA,EAAAA,cAAA,IAAkBQ,aAAa;EACvC;EAEAM,KAAKA,CAAA,EAAG;IACJ,OAAAD,2BAAA,CAAO,IAAI,EAAAnB,GAAA,EAAAA,GAAA;EACf;EAEAqB,UAAUA,CAAA,EAAG;IACT,OAAAF,2BAAA,CAAO,IAAI,EAAAhB,QAAA,EAAAA,QAAA;EACf;EAEAmB,WAAWA,CAAA,EAAG;IACV,OAAAH,2BAAA,CAAO,IAAI,EAAAjB,UAAA,EAAAA,UAAA;EACf;EAEAqB,QAAQA,CAAA,EAAG;IACP,OAAAJ,2BAAA,CAAO,IAAI,EAAAf,MAAA,EAAAA,MAAA;EACf;EAEAoB,WAAWA,CAAA,EAAG;IACV,OAAAL,2BAAA,CAAO,IAAI,EAAAd,SAAA,EAAAA,SAAA;EACf;EAEAoB,cAAcA,CAAA,EAAG;IACb,OAAAN,2BAAA,CAAO,IAAI,EAAAb,cAAA,EAAAA,cAAA;EACf;EAEA,MAAMoB,YAAYA,CAAA,EAAG;IACjB;AACR;AACA;;IAEQ,MAAMC,GAAG,GAAG,MAAM7B,kBAAkB,CAAC8B,KAAK,CAAC,8BAA8B,GAAAT,2BAAA,CAAC,IAAI,EAAAjB,UAAA,EAAAA,UAAA,CAAW,CAAC;IAE1F,IAAIyB,GAAG,CAAC,OAAO,CAAC,EAAC;MACb,IAAI5B,kBAAkB,CAAC,OAAO,EAAE4B,GAAG,CAAC,cAAc,CAAC,CAAC;IACxD;IACA,MAAME,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,IAAI,IAAIH,GAAG,CAAC,OAAO,CAAC,EAAE;MAC3BE,QAAQ,CAACE,IAAI,CAAC,IAAIxB,IAAI,CAACuB,IAAI,CAAC,IAAI,CAAC,EAAEA,IAAI,CAAC,WAAW,CAAC,EAAEA,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5E;IAEA,OAAOD,QAAQ;EACnB;EAEA,aAAaG,OAAOA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IACnC,MAAMC,IAAI,GAAG;MAACF,QAAQ,EAAEA,QAAQ;MAAEG,QAAQ,EAAEF;IAAM,CAAC;IAEnD,MAAMP,GAAG,GAAG,MAAM7B,kBAAkB,CAACuC,MAAM,CAACF,IAAI,EAAE,WAAW,CAAC;IAE9D,IAAIR,GAAG,CAAC,OAAO,CAAC,EAAC;MACb,MAAM,IAAI5B,kBAAkB,CAAC,OAAO,EAAE4B,GAAG,CAAC,cAAc,CAAC,CAAC;IAC9D;IAEA,MAAMG,IAAI,GAAG,IAAIvB,IAAI,CAACoB,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,CAAC;IAC3F,IAAI5B,kBAAkB,CAAC,SAAS,EAAE,6BAA6B,CAAC;IAChE,OAAO+B,IAAI;EACf;EACA,aAAaQ,QAAQA,CAACL,QAAQ,EAAEC,MAAM,EAAE;IACpC,MAAMC,IAAI,GAAIF,QAAQ,KAAG,EAAE,IAAIC,MAAM,KAAG,EAAE,GAAI;MAACD,QAAQ,EAAEA,QAAQ;MAAEG,QAAQ,EAAEF;IAAM,CAAC,GAAGK,SAAS;IAEhG,MAAMZ,GAAG,GAAG,MAAM7B,kBAAkB,CAACuC,MAAM,CAAC,YAAY,EAAEF,IAAI,CAAC;IAC/DK,OAAO,CAACC,GAAG,CAACd,GAAG,CAAC;IAGhB,IAAIA,GAAG,CAAC,OAAO,CAAC,EAAC;MACb,MAAM,IAAI5B,kBAAkB,CAAC,OAAO,EAAE4B,GAAG,CAAC,cAAc,CAAC,CAAC;IAC9D;IAEA,MAAMG,IAAI,GAAG,IAAIvB,IAAI,CAACoB,GAAG,CAAC,IAAI,CAAC,EAAEA,GAAG,CAAC,UAAU,CAAC,EAAEA,GAAG,CAAC,SAAS,CAAC,CAAC;IACjE,IAAI5B,kBAAkB,CAAC,SAAS,EAAE,6BAA6B,CAAC;IAChE,OAAO+B,IAAI;EACf;EAEA,aAAaY,QAAQA,CAAA,EAAG;IACpB;AACR;AACA;IACQ,IAAI3C,kBAAkB,CAAC,SAAS,EAAE,8BAA8B,CAAC;IACjE,OAAO,IAAI;EACf;EAEA,aAAa4C,aAAaA,CAACV,QAAQ,EAAErB,KAAK,EAAEwB,QAAQ,EAAEzB,OAAO,EAAE;IAC3D;AACR;AACA;;IAEQ;IACA,MAAMwB,IAAI,GAAG;MAACF,QAAQ,EAAEA,QAAQ;MAAErB,KAAK,EAAEA,KAAK;MAAEwB,QAAQ,EAAEA,QAAQ;MAAEQ,OAAO,EAAEjC;IAAO,CAAC;IAErF,MAAMgB,GAAG,GAAG,MAAM7B,kBAAkB,CAACuC,MAAM,CAACF,IAAI,EAAE,oBAAoB,CAAC;IAEvE,IAAIR,GAAG,CAAC,OAAO,CAAC,EAAC;MACb,IAAI5B,kBAAkB,CAAC,OAAO,EAAE4B,GAAG,CAAC,cAAc,CAAC,CAAC;MACpD;IACJ;IAEA,MAAMkB,OAAO,GAAG,IAAItC,IAAI,CAACoB,GAAG,CAAC,QAAQ,CAAC,EAAEM,QAAQ,EAAEtB,OAAO,CAAC;IAC1D,IAAIZ,kBAAkB,CAAC,SAAS,EAAE,6BAA6B,CAAC;IAEhE,OAAO8C,OAAO;EAClB;EAEA,aAAaC,YAAYA,CAACrC,EAAE,EAAE;IAC1B,MAAMkB,GAAG,GAAG,MAAM7B,kBAAkB,CAAC8B,KAAK,CAAC,wBAAwB,GAAGnB,EAAE,CAAC;IAEzE,IAAIkB,GAAG,CAAC,OAAO,CAAC,EAAE;MACd,IAAI5B,kBAAkB,CAAC,OAAO,EAAE4B,GAAG,CAAC,cAAc,CAAC,CAAC;MACpD;IACJ;IAEA,MAAMkB,OAAO,GAAG,IAAItC,IAAI,CAACE,EAAE,EAAEkB,GAAG,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,EAAEA,GAAG,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC;IAE5J,OAAOkB,OAAO;EAClB;AACJ;AAEA,eAAetC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}