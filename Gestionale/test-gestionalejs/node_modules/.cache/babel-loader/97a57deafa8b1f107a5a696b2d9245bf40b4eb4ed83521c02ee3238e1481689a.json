{"ast":null,"code":"import _classPrivateFieldLooseKey from \"C:/xampp/htdocs/Gestionale/test-gestionalejs/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport PersistanceManager from \"../../persistance/PersistanceManager\";\nvar _id = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _titolo = /*#__PURE__*/_classPrivateFieldLooseKey(\"titolo\");\nvar _descrizione = /*#__PURE__*/_classPrivateFieldLooseKey(\"descrizione\");\nclass Pratica {\n  constructor(data) {\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _titolo, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _descrizione, {\n      writable: true,\n      value: void 0\n    });\n    Object.assign(data);\n  }\n  static async loadPratiche() {\n    const ret = await PersistanceManager.doGet('loadpratiche.php?email=paolo@email.com'); // da cambiare con l'email che è stata utilizzata per il login\n\n    if (ret['error']) {\n      // devo gestire il caso di errore\n    }\n    let retlist = [];\n    for (iter of ret['pratiche']) {\n      retlist.push(new Pratica(iter));\n    }\n    return ret;\n  }\n}\nexport default Pratica;","map":{"version":3,"names":["PersistanceManager","_id","_classPrivateFieldLooseKey","_titolo","_descrizione","Pratica","constructor","data","Object","defineProperty","writable","value","assign","loadPratiche","ret","doGet","retlist","iter","push"],"sources":["C:/xampp/htdocs/Gestionale/test-gestionalejs/src/businesslogic/pratiche/Pratiche.js"],"sourcesContent":["import PersistanceManager from \"../../persistance/PersistanceManager\";\r\n\r\nclass Pratica {\r\n    #id;\r\n    #titolo;\r\n    #descrizione;\r\n\r\n    constructor (data) {\r\n        Object.assign(data);\r\n    }\r\n\r\n    static async loadPratiche() {\r\n        const ret = await PersistanceManager.doGet('loadpratiche.php?email=paolo@email.com'); // da cambiare con l'email che è stata utilizzata per il login\r\n\r\n        if (ret['error']) {\r\n            // devo gestire il caso di errore\r\n        }\r\n        let retlist = [];\r\n\r\n        for (iter of ret['pratiche']) {\r\n            retlist.push(new Pratica(iter));\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n}\r\n\r\nexport default Pratica;"],"mappings":";AAAA,OAAOA,kBAAkB,MAAM,sCAAsC;AAAC,IAAAC,GAAA,gBAAAC,0BAAA;AAAA,IAAAC,OAAA,gBAAAD,0BAAA;AAAA,IAAAE,YAAA,gBAAAF,0BAAA;AAEtE,MAAMG,OAAO,CAAC;EAKVC,WAAWA,CAAEC,IAAI,EAAE;IAAAC,MAAA,CAAAC,cAAA,OAAAR,GAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAN,OAAA;MAAAO,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAL,YAAA;MAAAM,QAAA;MAAAC,KAAA;IAAA;IACfH,MAAM,CAACI,MAAM,CAACL,IAAI,CAAC;EACvB;EAEA,aAAaM,YAAYA,CAAA,EAAG;IACxB,MAAMC,GAAG,GAAG,MAAMd,kBAAkB,CAACe,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC;;IAEtF,IAAID,GAAG,CAAC,OAAO,CAAC,EAAE;MACd;IAAA;IAEJ,IAAIE,OAAO,GAAG,EAAE;IAEhB,KAAKC,IAAI,IAAIH,GAAG,CAAC,UAAU,CAAC,EAAE;MAC1BE,OAAO,CAACE,IAAI,CAAC,IAAIb,OAAO,CAACY,IAAI,CAAC,CAAC;IACnC;IAEA,OAAOH,GAAG;EACd;AAEJ;AAEA,eAAeT,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}