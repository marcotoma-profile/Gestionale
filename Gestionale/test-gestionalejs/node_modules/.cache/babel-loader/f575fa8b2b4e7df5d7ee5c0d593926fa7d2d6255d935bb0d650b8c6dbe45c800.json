{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/xampp/htdocs/Gestionale/test-gestionalejs/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/xampp/htdocs/Gestionale/test-gestionalejs/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport Pratica from \"./Pratiche\";\nvar _listapratiche = /*#__PURE__*/_classPrivateFieldLooseKey(\"listapratiche\");\nvar _ultimapratica = /*#__PURE__*/_classPrivateFieldLooseKey(\"ultimapratica\");\nclass PraticheManager {\n  constructor() {\n    Object.defineProperty(this, _listapratiche, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ultimapratica, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _listapratiche)[_listapratiche] = [];\n    _classPrivateFieldLooseBase(this, _ultimapratica)[_ultimapratica] = -1;\n  }\n  hasPratiche() {\n    /**\r\n     * ritorna true se ci sono delle pratiche assegnate all'utente\r\n     */\n    return _classPrivateFieldLooseBase(this, _listapratiche)[_listapratiche].length > 0;\n  }\n  async loadPratiche(email) {\n    /**\r\n     * serve per gestire il load delle pratiche. poi dovrà prendere in input la mail dell'utente loggato\r\n     */\n    const ret = await Pratica.loadPratiche();\n    _classPrivateFieldLooseBase(this, _listapratiche)[_listapratiche] = ret;\n  }\n  temp() {\n    let ret = [];\n    for (let iter of _classPrivateFieldLooseBase(this, _listapratiche)[_listapratiche]) {\n      ret.push(iter.toString());\n    }\n    return ret;\n  }\n  updateUltimaPratica() {\n    for (let iter of _classPrivateFieldLooseBase(this, _listapratiche)[_listapratiche]) {}\n  }\n}\nexport default PraticheManager;","map":{"version":3,"names":["Pratica","_listapratiche","_classPrivateFieldLooseKey","_ultimapratica","PraticheManager","constructor","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","hasPratiche","length","loadPratiche","email","ret","temp","iter","push","toString","updateUltimaPratica"],"sources":["C:/xampp/htdocs/Gestionale/test-gestionalejs/src/businesslogic/pratiche/PraticheManager.js"],"sourcesContent":["import Pratica from \"./Pratiche\";\r\n\r\nclass PraticheManager {\r\n    \r\n    #listapratiche;\r\n    #ultimapratica;\r\n\r\n    constructor () {\r\n        this.#listapratiche = [];\r\n        this.#ultimapratica = -1;\r\n    }\r\n\r\n    hasPratiche() {\r\n        /**\r\n         * ritorna true se ci sono delle pratiche assegnate all'utente\r\n         */\r\n        return this.#listapratiche.length > 0;\r\n    }\r\n\r\n    async loadPratiche(email) {\r\n        /**\r\n         * serve per gestire il load delle pratiche. poi dovrà prendere in input la mail dell'utente loggato\r\n         */\r\n        const ret = await Pratica.loadPratiche();\r\n        this.#listapratiche = ret;\r\n    }\r\n\r\n    temp() {\r\n        let ret = [];\r\n        for (let iter of this.#listapratiche){\r\n            ret.push(iter.toString());\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    updateUltimaPratica() {\r\n        for (let iter of this.#listapratiche){\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default PraticheManager;"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,YAAY;AAAC,IAAAC,cAAA,gBAAAC,0BAAA;AAAA,IAAAC,cAAA,gBAAAD,0BAAA;AAEjC,MAAME,eAAe,CAAC;EAKlBC,WAAWA,CAAA,EAAI;IAAAC,MAAA,CAAAC,cAAA,OAAAN,cAAA;MAAAO,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAJ,cAAA;MAAAK,QAAA;MAAAC,KAAA;IAAA;IACXC,2BAAA,KAAI,EAAAT,cAAA,EAAAA,cAAA,IAAkB,EAAE;IACxBS,2BAAA,KAAI,EAAAP,cAAA,EAAAA,cAAA,IAAkB,CAAC,CAAC;EAC5B;EAEAQ,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,OAAOD,2BAAA,KAAI,EAAAT,cAAA,EAAAA,cAAA,EAAgBW,MAAM,GAAG,CAAC;EACzC;EAEA,MAAMC,YAAYA,CAACC,KAAK,EAAE;IACtB;AACR;AACA;IACQ,MAAMC,GAAG,GAAG,MAAMf,OAAO,CAACa,YAAY,CAAC,CAAC;IACxCH,2BAAA,KAAI,EAAAT,cAAA,EAAAA,cAAA,IAAkBc,GAAG;EAC7B;EAEAC,IAAIA,CAAA,EAAG;IACH,IAAID,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIE,IAAI,IAAAP,2BAAA,CAAI,IAAI,EAAAT,cAAA,EAAAA,cAAA,GAAgB;MACjCc,GAAG,CAACG,IAAI,CAACD,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC;IAC7B;IACA,OAAOJ,GAAG;EACd;EAEAK,mBAAmBA,CAAA,EAAG;IAClB,KAAK,IAAIH,IAAI,IAAAP,2BAAA,CAAI,IAAI,EAAAT,cAAA,EAAAA,cAAA,GAAgB,CAErC;EACJ;AACJ;AAEA,eAAeG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}